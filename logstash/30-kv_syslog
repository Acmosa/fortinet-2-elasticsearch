input {

    pipeline {
        address => "kv_syslog"
    }

}

filter {

    mutate  { 
        rename => {"message" => "[event][original]"} 
        add_field => ["[event][created]", "%{@timestamp}"] # event.created: when the event is created by logstash
    }
    
    grok {
        match => ["[event][original]", "%{SYSLOG5424PRI:syslog_index}%{GREEDYDATA:[@metadata][message]}"]
        #overwrite => ["message"]
        tag_on_failure => ["fortinet_grok_failure"]
        remove_field => [ "syslog_index" ]
    }

    if "fortinet_grok_failure" not in [tags] {
        kv {
            source => "[@metadata][message]"
            value_split => "="
            field_split => " "
            #prefix => "fortios." 
        }
        
#        if "fortianalyzer" in [tags] {
#            mutate{
#                replace => {"[@metadata][timestamp]" => "%{date} %{time}"}
#            }
#        }

        if [event][dataset]=="fortinet.fortigate" {
            # 6.2 
            if [tz] {
                grok {
                    match => ["tz", "(?<[@metadata][first_three]>^...)"]
                    tag_on_failure => ["first_three_grok_failure"]
                }
                grok {
                    match => ["tz", "(?<[@metadata][last_two]>..\r?$)"]
                    tag_on_failure => ["last_two_grok_failure"]
                }

                mutate  {
                    replace => {"[tz]" => "%{[@metadata][first_three]}:%{[@metadata][last_two]}"}
                    replace => {"[@metadata][timestamp]" => "%{date} %{time} %{tz}"}
                }
            } 
        
            # 6.0 and below
#            else {
#                mutate{
#                    replace => {"[@metadata][timestamp]" => "%{date} %{time}"}
#                }
#            }

        }

        else if [event][dataset]=="fortinet.fortisandbox" {
            # type=event 
            if [tzone] {
#                ruby { 
#                    code => "event.set('[tz_fsa]', event.get('[tzone]').to_i / 3600 *100 )" # for tzone=-18000 returns tz_sdx=-500, and it should be -0500
#                }
#
                mutate  {
#                    replace => {"[@metadata][timestamp]" => "%{date} %{time} %{tz_fsa}"}
#                    replace => {"[@metadata][timestamp]" => "%{date} %{time}"}
                    replace => {"[@metadata][timestamp]" => "%{date}T%{time}Z" }
                    add_field => {"[event][timezone]" => "-05:00" }
                }
            } 
#        
#           # type=alert
            else {
                mutate{
                    replace => {"[@metadata][timestamp]" => "%{date}T%{time}Z" }
                    add_field => {"[event][timezone]" => "-05:00" }
                }
            }
        }

        # forti* without tz: fortiweb, fortimail, forticlient, fortigate 6.0, and any log comming from fortianalyzer
        if ![@metadata][timestamp] {
            mutate{
                add_field => {"[tz]" => "-05:00" }
                add_field => {"[event][timezone]" => "America/Lima" }
                add_tag => [ "setting_default_timezone" ]
                add_field => {"[@metadata][timestamp]" => "%{date} %{time} %{[event][timezone]}"}
            }
        }
        
#        # forti* without tz
#        else {
#            mutate{
#                replace => {"[@metadata][timestamp]" => "%{date} %{time}"}
#            }
#        }
#        
#        # Just for avoid errors in timestamp field
#        mutate { 
#            add_field => {"[event][timezone]" => "America/Lima" }
#            add_tag => [ "setting_default_timezone" ]
#        }

        

        date {
            match => ["[@metadata][timestamp]", "yyyy-MM-dd HH:mm:ss ZZ", "yyyy-MM-dd HH:mm:ss ZZZ", "yyyy-MM-dd HH:mm:ss", "ISO8601"]
            #timezone => "%{[event][timezone]}"
            target => "@timestamp"
            tag_on_failure => ["_dateparsefailure_%{[@metadata][timestamp]}"]
            #add_tag => [ "%{[@metadata][timestamp]}" ]
            remove_field => [ "date","time" ]
            
        }
    
        #mutate { remove_field => ["date","time","syslog_index","message","first_three","last_two"] }

    }
    
}

output {
    
    if [event][dataset]=="fortinet.fortigate" {
        pipeline{
            send_to => "fortigate_2_ecs"
        }
    }
    else if [event][dataset]=="fortinet.fortiweb" {
        pipeline{
            send_to => "fortiweb_2_ecs"
        }
      }
    else if [event][dataset]=="fortinet.fortisandbox" {
        pipeline{
            send_to => "fortisandbox_2_ecs"
        }
    }
    else if [event][dataset]=="fortinet.fortimail" {
        pipeline{
            send_to => "fortimail_2_ecs"
        }
    }
    else if [event][dataset]=="fortinet.forticlient" {
        pipeline{
            send_to => "forticlient_2_ecs"
        }
    }
}