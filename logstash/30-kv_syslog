input {

    pipeline {
        address => "kv_syslog"
    }

}

filter {

    mutate  { 
        copy => {"message" => "[event][original]"} 
        add_field => ["[event][created]", "%{@timestamp}"] # event.created: when the event is created by logstash
    }
    
    grok {
        match => ["message", "%{SYSLOG5424PRI:syslog_index}%{GREEDYDATA:message}"]
        overwrite => ["message"]
        tag_on_failure => ["fortinet_grok_failure"]
    }

    if "fortinet_grok_failure" not in [tags] {
        kv {
          source => "message"
          value_split => "="
          field_split => " "
        }

        if [event][dataset]=="fortinet.fortigate" {
            # 6.2 
            if [tz] {
                mutate  {
                    replace => {"[@metadata][timestamp]" => "%{date} %{time} %{tz}"}
                }
            } 
        
            # 6.0 and below
            else {
                mutate{
                replace => {"[@metadata][timestamp]" => "%{date} %{time}"}
                }
            }

        }

        else if [event][dataset]=="fortinet.fortisandbox" {
            # type=event 
            if [tzone] {
#                ruby { 
#                    code => "event.set('[tz_sdx]', event.get('[tzone]').to_i / 3600 *100 )" # for tzone=-18000 returns tz_sdx=-500, and it should be -0500
#                }
#
                mutate  {
#                    replace => {"[@metadata][timestamp]" => "%{date} %{time} %{tz_sdx}"}
#                    replace => {"[@metadata][timestamp]" => "%{date} %{time}"}
                    replace => {"[@metadata][timestamp]" => "%{date}T%{time}Z" }
                }
            } 
#        
#            # type=alert
            else {
                mutate{
                replace => {"[@metadata][timestamp]" => "%{date}T%{time}Z" }
                }
            }
        }

        
        # forti* without tz
        else {
            mutate{
            replace => {"[@metadata][timestamp]" => "%{date} %{time}"}
            }
        }
        
        # Just for avoid errors in timestamp field
        if !([event][timezone]) {
            mutate { 
                add_field => {"[event][timezone]" => "America/Lima" }
                add_field => {"[tags]" => "setting_default_timezone" }
            }
        }        

        date {
            match => ["[@metadata][timestamp]", "yyyy-MM-dd HH:mm:ss", "yyyy-MM-dd HH:mm:ss Z", "ISO8601"]
            timezone => "%{[event][timezone]}"
            target => "@timestamp"
            tag_on_failure => ["_dateparsefailure_kv_syslog"]
            
        }
    
        mutate{remove_field => ["date","time","syslog_index","message"]}

    }
    
}

output {
    
    if [event][dataset]=="fortinet.fortigate" {
        pipeline{
            send_to => "fortigate_2_ecs"
        }
    }
    else if [event][dataset]=="fortinet.fortiweb" {
        pipeline{
            send_to => "fortiweb_2_ecs"
        }
      }
    else if [event][dataset]=="fortinet.fortisandbox" {
        pipeline{
            send_to => "fortisandbox_2_ecs"
        }
    }
    else if [event][dataset]=="fortinet.fortimail" {
        pipeline{
            send_to => "fortimail_2_ecs"
        }
    }
    else if [event][dataset]=="fortinet.forticlient" {
        pipeline{
            send_to => "forticlient_2_ecs"
        }
    }
}