input {
    pipeline {
        address => "fortiweb_2_ecs"
    }
}

filter {
#remove event.original for saving disk space
    #mutate{ remove_field => ["[event][original]"]  }

#validate "N/A" on ip fields for avoiding mapping mismatch
    if [dst]=="N/A" { mutate { remove_field => ["dst"] } }
    if [src]=="N/A" { mutate { remove_field => ["src"] } }
    # Add some other field that may contain N/A
    if [signature_id]=="N/A" { mutate { remove_field => ["signature_id"] } }

#rename fortios fields that overlap with ECS.    
    mutate {
        rename => { "[service]" => "[fortiweb][service]" }
        rename => { "[user]" => "[fortiweb][user]" }
    }

#ecs translation
    mutate {
        
        add_field => { "[ecs][version]" => "1.5.0" }
        rename => {"syslog5424_pri" => "[log][syslog][priority]"}

        copy =>{ "[action]"=> "[event][action]" }
        copy =>{ "[cipher_suite]"=> "[tls][cipher]" }
        copy =>{ "[device_id]"=> "[observer][serial_number]" }
        copy =>{ "[dst]"=> "[destination][ip]" }
        copy =>{ "[dst_port]"=> "[destination][port]" }
        copy =>{ "[http_agent]"=> "[user_agent][original]" }
        copy =>{ "[http_host]"=> "[url][domain]" }
        copy =>{ "[http_method]"=> "[http][request][method]" }
        copy =>{ "[http_refer]"=> "[http][request][referrer]" }
        copy =>{ "[http_request_bytes]"=> "[http][request][bytes]" }
        copy =>{ "[http_response_bytes]"=> "[http][response][bytes]" }
        copy =>{ "[http_retcode]"=> "[http][response][status_code]" }
        copy =>{ "[http_url]"=> "[url][path]" }
        copy =>{ "[http_version]"=> "[http][version]" }
        copy =>{ "[log_id]"=> "[event][code]" }
        copy =>{ "[main_type]"=> "[event][category]" }
        # copied msg field to [rule][description]
        copy =>{ "[msg]"=> "[rule][description]" }
        copy =>{ "[msg_id]"=> "[event][sequence]" }
        # change policy to rule.ruleset (according to ECS docs : Name of the ruleset, policy, group, or parent category in which the rule used to generate this event is a member.)
        # This will lead to more depth in categorization fields:
        copy =>{ "[policy]"=> "[rule][ruleset]" }
        # Added signature_id as rule.id
        copy =>{ "[signature_id]"=> "[rule][id]" }
        copy =>{ "[proto]"=> "[network][transport]" }
        copy =>{ "[reason]"=> "[event][reason]" }
        copy =>{ "[fortiweb][service]"=> "[network][protocol]" }
        copy =>{ "[signature_cve_id]"=> "[vulnerability][id]" }
        copy =>{ "[src]"=> "[source][ip]" }
        copy =>{ "[src_port]"=> "[source][port]" }
        #copy =>{ "[status]"=> "[event][outcome]" }
        copy =>{ "[threat_level]"=> "[vulnerability][severity]" }
        #copy =>{ "[type]"=> "[event][dataset]" }
        copy =>{ "[fortiweb][user]"=> "[user][name]" }
        

    }
    mutate {
        copy =>{ "[user_name]"=> "[user][name]" }
        # copy subtype to [rule][name] instead of [event][category]
        copy =>{ "[subtype]"=> "[rule][name]" }
    }
    
    if "attack" in [type] {
        ############### ATTACK EVENT ID MAPPING #####################
        translate {
            field => "[event][code]"
            destination => "[@metadata][attack_csv]"
            dictionary_path => "/etc/logstash/fortiweb_attack_logid.yml"
            fallback => "default_attack"
        }

        if [@metadata][attack_csv] == "default_attack" {
            mutate {
                add_field => { "[tags]" => "error_attack_enrichment" }
                #add_field => { "[tags]" => "send_index_error" }
            }

        } else {
            csv {
                source => "[@metadata][attack_csv]"
                separator => ","
                columns => ["[event][category]","[event][kind]"]
                skip_empty_columns => true
            }
        }
        

    }

}

output {
    pipeline {
        send_to => "common_ecs" 
    }

}
