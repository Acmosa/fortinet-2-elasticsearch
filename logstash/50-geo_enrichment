input {
    pipeline {
        address => "geo_enrichment"
    }
}
filter {

######################### locality #################################
    if [source][ip] {
        cidr {
                add_field => {"[source][locality]" => "private"}
                address => [ "%{[source][ip]}" ]
                network => [ "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16" ]
        }
        cidr {
                add_field => {"[source][locality]" => "loopback"}
                address => [ "%{[source][ip]}" ]
                network => [ "127.0.0.0/8" ]
        }
        cidr {
                add_field => {"[source][locality]" => "link-local"}
                address => [ "%{[source][ip]}" ]
                network => [ "169.254.0.0/16" ]
        }
    }
    
    if [source][nat][ip] {
        cidr {
                add_field => {"[source][nat][locality]" => "private"}
                address => [ "%{[source][nat][ip]}" ]
                network => [ "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16" ]
        }
    }

    if [destination][ip] {
        cidr {
                add_field => {"[destination][locality]" => "private"}
                address => [ "%{[destination][ip]}" ]
                network => [ "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16" ]
        }
        cidr {
                add_field => {"[destination][locality]" => "loopback"}
                address => [ "%{[destination][ip]}" ]
                network => [ "127.0.0.0/8" ]
        }
        cidr {
                add_field => {"[destination][locality]" => "link-local"}
                address => [ "%{[destination][ip]}" ]
                network => [ "169.254.0.0/16" ]
        }
    }

    if [destination][nat][ip] {
        cidr {
                add_field => {"[destination][nat][locality]" => "private"}
                address => [ "%{[destination][nat][ip]}" ]
                network => [ "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16" ]
        }
    }

    #::1 -- ipv6 loopback
    #fe80::/10 -- ipv6 link local
    #fd00::/8 -- ipv6 private networking

    ##### Defining fields to apply geo pluging to source and destination fields

    if [source][locality] not in [ "private", "loopback" , "link-local" ] {
        mutate {
            copy => { "[source][ip]" => "[@metadata][src_ip_geo_apply]"  }
            add_field => { "[source][locality]" => "public" }
        }
    }   else if [source][nat][locality] != "private" {
        mutate {
            copy => { "[source][nat][ip]" => "[@metadata][src_ip_geo_apply]" }
            add_field => { "[source][nat][locality]" => "public" }
        }
    }
    
    if [destination][locality] not in [ "private", "loopback" , "link-local" ] {
        mutate {
            copy => { "[destination][ip]" => "[@metadata][dest_ip_geo_apply]" }
            add_field => { "[destination][locality]" => "public" }
        }
    }   else if [destination][nat][locality] != "private" {
        mutate {
            copy => { "[destination][nat][ip]" => "[@metadata][dest_ip_geo_apply]" }
            add_field => { "[destination][nat][locality]" => "public" }
        }
    }
        
    #### Appliying geo plugging to fields
    if [@metadata][src_ip_geo_apply] {
        geoip {
            source => "[@metadata][src_ip_geo_apply]"
            target => "[source][geo]"
            fields => ["city_name", "continent_code", "country_code2", "country_name", "location", "region_code", "region_name"]
#            tag_on_failure => ["_source_geoip_lookup_failure"]
        }
    }
    
    if [@metadata][dest_ip_geo_apply] {
        geoip {
            source => "[@metadata][dest_ip_geo_apply]"
            target => "[destination][geo]"
            fields => ["city_name", "continent_code", "country_code2", "country_name", "location", "region_code", "region_name"]
#            tag_on_failure => ["_destination_geoip_lookup_failure"]
        }
    }
    

    #rename iso code fields to match ECS
    mutate { 
        rename => { "[source][geo][country_code2]" => "[source][geo][country_iso_code]" }
        rename => { "[destination][geo][country_code2]" => "[destination][geo][country_iso_code]" }
        rename => { "[source][geo][region_code]" => "[source][geo][region_iso_code]" }
        rename => { "[destination][geo][region_code]" => "[destination][geo][region_iso_code]" }
    }

    #### related.*  ############################################################################
    if [source][ip] { mutate { add_field => { "[related][ip]" => "%{[source][ip]}" }    }    }
    if [destination][ip] { mutate { add_field => { "[related][ip]" => "%{[destination][ip]}" }    }    }
    if [source][nat][ip] { mutate { add_field => { "[related][ip]" => "%{[source][nat][ip]}" }    }    }
    if [destination][nat][ip] { mutate { add_field => { "[related][ip]" => "%{[destination][nat][ip]}" }    }    }

    if [source][user][name] { mutate { add_field => { "[related][user]" => "%{[source][user]}" }    }    }
    if [destination][user][name] { mutate { add_field => { "[related][user]" => "%{[destination][user]}" }    }    }


    #### network.bytes, network.packets  ############################################################################
    
    if ([source][bytes] and [destination][bytes]) {
        ruby {
            code => "event.set('[network][bytes]', event.get('[source][bytes]').to_i + event.get('[destination][bytes]').to_i )"
        }
    }

    if ([source][packets] and [destination][packets]) {
        ruby {
            code => "event.set('[network][packets]', event.get('[source][packets]').to_i + event.get('[destination][packets]').to_i )"
        }
    }

   ### network.bytes_delta = source.bytes - destination.bytes (for catching upload data exfiltration) #################################

     if ([source][bytes] and [destination][bytes]){
        ruby {
            code => "event.set('[network][bytes_delta]', event.get('[source][bytes]').to_i - event.get('[destination][bytes]').to_i )"
        }
    }

    #### fortinet duration is on seconds, and ecs specifies it should be on nanoseconds
     if ([source][bytes] and [destination][bytes]){
        ruby {
            code => "event.set('[event][duration]', event.get('[event][duration]').to_i * 1000000000 )"
        }
    }

    ##### network.community_id (just tcp/udp) ###########################################################################
    # community-id processor    
    # https://www.elastic.co/guide/en/beats/filebeat/master/community-id.html

    if ([source][ip] and [destination][ip] and [source][port] and [destination][port] and [network][iana_number]){
        fingerprint {
    		method => "SHA1"
            base64encode => "true"
        	source => ["[source][ip]","[detination][ip]","[source][port]","[destination][port]","[network][iana_number]"]
            concatenate_sources => true
            target => "[network][community_id]"
    	}
        
          mutate {
            update => { "[network][community_id]" => "1:%{[network][community_id]}" }
          }
    }

    ##### registered domain ###########################################################################
    # for installing tld filter plugin
    # cd /usr/share/logstash
    # sudo bin/logstash-plugin install logstash-filter-tld
    # dns.question.name #########################################
    tld {
        source => "[dns][question][name]"
        target => "[@metadata][domain_dns]"
    }
    if [@metadata][domain_dns][trd]{
        mutate {
            join =>  { "[@metadata][domain_dns][trd]" => "." }
         }
    }
    mutate {
        rename =>    { "[@metadata][domain_dns][domain]" => "[dns][question][registered_domain]"  }
        rename =>    { "[@metadata][domain_dns][trd]" => "[dns][question][subdomain]"  }
        rename =>    { "[@metadata][domain_dns][tld]" => "[dns][question][top_level_domain]" }
    }

    # url.domain #########################################
    tld {
        source => "[url][domain]"
        target => "[@metadata][domain_url]"
    }
    if [@metadata][domain_url][trd]{
        mutate {
            join =>  { "[@metadata][domain_url][trd]" => "." }
         }
    }
    mutate {
        rename =>    { "[@metadata][domain_url][domain]" => "[url][registered_domain]"  }
        #rename =>    { "[@metadata][domain_url][trd]" => "[url][subdomain]"  }
        rename =>    { "[@metadata][domain_url][tld]" => "[url][top_level_domain]" }
    }


    
    #### tls.client.server_name recomendation https://www.elastic.co/guide/en/ecs/current/ecs-tls.html
    mutate {
        copy =>{ "[tls][client][server_name]"=> "[destination][domain]" }
    }

    #for "if" of output
    mutate {
        lowercase => [ "[organization][name]" ,"[observer][type]" ]
        strip => [ "[organization][name]" ]
    }

}
output {
    if [organization][name]=="some_org" {
        pipeline {
            #send_to => "%{[organization][name]}_networks_lookup"
            send_to => "some_org_networks_lookup"
        }
    }
    else {
        pipeline {
            send_to => "output"
        }
    }
}