input {
    pipeline {
        address => "common_ecs"
    }
}
filter {

######################### locality #################################
    if [source][ip] {
        cidr {
                add_field => {"[source][locality]" => "private"}
                address => [ "%{[source][ip]}" ]
                network => [ "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16" ]
        }
        cidr {
                add_field => {"[source][locality]" => "loopback"}
                address => [ "%{[source][ip]}" ]
                network => [ "127.0.0.0/8" ]
        }
        cidr {
                add_field => {"[source][locality]" => "link-local"}
                address => [ "%{[source][ip]}" ]
                network => [ "169.254.0.0/16" ]
        }
        cidr {
                add_field => {"[source][locality]" => "multicast"}
                address => [ "%{[source][ip]}" ]
                network => [ "224.0.0.0/4" ]
        }
        if ![source][locality] {
            mutate {
                copy => { "[source][ip]" => "[@metadata][src_ip_geo_apply]"  }
                add_field => { "[source][locality]" => "public" }
            }
        }
    }
    
    if [source][nat][ip] {
        cidr {
                add_field => {"[source][nat][locality]" => "private"}
                address => [ "%{[source][nat][ip]}" ]
                network => [ "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16" ]
        }
        if ![source][nat][locality] {
            mutate {
                copy => { "[source][nat][ip]" => "[@metadata][src_ip_geo_apply]"  }
                add_field => { "[source][nat][locality]" => "public" }
            }
        }
    }

    if [destination][ip] {
        cidr {
                add_field => {"[destination][locality]" => "private"}
                address => [ "%{[destination][ip]}" ]
                network => [ "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16" ]
        }
        cidr {
                add_field => {"[destination][locality]" => "loopback"}
                address => [ "%{[destination][ip]}" ]
                network => [ "127.0.0.0/8" ]
        }
        cidr {
                add_field => {"[destination][locality]" => "link-local"}
                address => [ "%{[destination][ip]}" ]
                network => [ "169.254.0.0/16" ]
        }
        cidr {
                add_field => {"[destination][locality]" => "multicast"}
                address => [ "%{[destination][ip]}" ]
                network => [ "224.0.0.0/4" ]
        }
        if ![destination][locality] {
            mutate {
                copy => { "[destination][ip]" => "[@metadata][dst_ip_geo_apply]"  }
                add_field => { "[destination][locality]" => "public" }
            }
        }
    }

    if [destination][nat][ip] {
        cidr {
                add_field => {"[destination][nat][locality]" => "private"}
                address => [ "%{[destination][nat][ip]}" ]
                network => [ "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16" ]
        }
        if ![destination][nat][locality] {
            mutate {
                copy => { "[destination][nat][ip]" => "[@metadata][dst_ip_geo_apply]"  }
                add_field => { "[destination][nat][locality]" => "public" }
            }
        }
    }

    #::1 -- ipv6 loopback
    #fe80::/10 -- ipv6 link local
    #fd00::/8 -- ipv6 private networking
        
    #### Appliying geo plugging to fields
    if [@metadata][src_ip_geo_apply] {
        geoip {
            source => "[@metadata][src_ip_geo_apply]"
            target => "[source][geo]"
            fields => ["city_name", "continent_code", "country_code2", "country_name", "location", "region_code", "region_name"]
#            tag_on_failure => ["_source_geoip_lookup_failure"]
        }
    }
    
    if [@metadata][dst_ip_geo_apply] {
        geoip {
            source => "[@metadata][dst_ip_geo_apply]"
            target => "[destination][geo]"
            fields => ["city_name", "continent_code", "country_code2", "country_name", "location", "region_code", "region_name"]
#            tag_on_failure => ["_destination_geoip_lookup_failure"]
        }
    }
    

    #rename iso code fields to match ECS
    mutate { 
        rename => { "[source][geo][country_code2]" => "[source][geo][country_iso_code]" }
        rename => { "[destination][geo][country_code2]" => "[destination][geo][country_iso_code]" }
        rename => { "[source][geo][region_code]" => "[source][geo][region_iso_code]" }
        rename => { "[destination][geo][region_code]" => "[destination][geo][region_iso_code]" }
    }

    #### related.*  ############################################################################
    if [source][ip] { mutate { add_field => { "[related][ip]" => "%{[source][ip]}" }    }    }
    if [destination][ip] { mutate { add_field => { "[related][ip]" => "%{[destination][ip]}" }    }    }
    if [source][nat][ip] { mutate { add_field => { "[related][ip]" => "%{[source][nat][ip]}" }    }    }
    if [destination][nat][ip] { mutate { add_field => { "[related][ip]" => "%{[destination][nat][ip]}" }    }    }

    if [source][user][name] { mutate { add_field => { "[related][user]" => "%{[source][user][name]}" }    }    }
    if [destination][user][name] { mutate { add_field => { "[related][user]" => "%{[destination][user][name]}" }    }    }


    #### network.bytes, network.packets  ############################################################################
    
    if ([source][bytes] and [destination][bytes]) {
        ruby {
            code => "event.set('[network][bytes]', event.get('[source][bytes]').to_i + event.get('[destination][bytes]').to_i )"
        }
    }

    if ([source][packets] and [destination][packets]) {
        ruby {
            code => "event.set('[network][packets]', event.get('[source][packets]').to_i + event.get('[destination][packets]').to_i )"
        }
    }

   ### network.bytes_delta = source.bytes - destination.bytes (for catching upload data exfiltration) #################################

     if ([source][bytes] and [destination][bytes]){
        ruby {
            code => "event.set('[network][bytes_delta]', event.get('[source][bytes]').to_i - event.get('[destination][bytes]').to_i )"
        }
    }

    #### fortinet duration is on seconds, and ecs specifies it should be on nanoseconds
     if ([event][duration]){
        ruby {
            code => "event.set('[event][duration]', event.get('[event][duration]').to_i * 1000000000 )"
        }
    }

    #### day of week, hour of day ############################################################################
    # event.timezone must be on ZZ format (HH:mm). Example: -05:00
	ruby {
            code => "
            t = event.get('@timestamp').time
            tz=  event.get('[event][timezone]')
            t.localtime(tz)
            event.set('[event][hour_of_day]', t.strftime('%H'))
            "
     }
    ruby {
            code => "
            t = event.get('@timestamp').time
            tz=  event.get('[event][timezone]')
            t.localtime(tz)
            event.set('[event][day_of_week]', t.strftime('%A'))
            "
     }

    ##### network.community_id (just tcp/udp) ###########################################################################
    # community-id processor    
    # https://www.elastic.co/guide/en/beats/filebeat/master/community-id.html

    if ([source][ip] and [destination][ip] and [source][port] and [destination][port] and [network][iana_number]){
        fingerprint {
    		method => "SHA1"
            base64encode => "true"
        	source => ["[source][ip]","[detination][ip]","[source][port]","[destination][port]","[network][iana_number]"]
            concatenate_sources => true
            target => "[network][community_id]"
    	}
        
          mutate {
            update => { "[network][community_id]" => "1:%{[network][community_id]}" }
          }
    }

    ##### registered domain ###########################################################################
    # for installing tld filter plugin
    # cd /usr/share/logstash
    # sudo bin/logstash-plugin install logstash-filter-tld
    # dns.question.name #########################################
    tld {
        source => "[dns][question][name]"
        target => "[@metadata][domain_dns]"
    }
    if [@metadata][domain_dns][trd]{
        mutate {
            join =>  { "[@metadata][domain_dns][trd]" => "." }
         }
    }
    mutate {
        rename =>    { "[@metadata][domain_dns][domain]" => "[dns][question][registered_domain]"  }
        rename =>    { "[@metadata][domain_dns][trd]" => "[dns][question][subdomain]"  }
        rename =>    { "[@metadata][domain_dns][tld]" => "[dns][question][top_level_domain]" }
    }

    # url pasrsing #########################################
    # https://discuss.elastic.co/t/grok-uri-extract/54836/3
    if [url][full] {
        grok {
            break_on_match => true
            match => [ "[url][full]", "%{URIPROTO:[url][scheme]}://(?:%{USER:[url][username]}(?::[^@]*)?@)?(?:%{URIHOST:[url][domain]})?(?:%{URIPATHPARAM:[@metadata][uri_param]})?" ,
                       "[url][full]", "%{URIPROTO:[url][scheme]}://%{URIHOST:[url][domain]}"
                    ]
        }
        grok {
          break_on_match => true
          match => [ "[@metadata][uri_param]", "%{GREEDYDATA:[url][path]}\?%{GREEDYDATA:[url][query]}" ,
                     "[@metadata][uri_param]", "%{GREEDYDATA:[url][path]}"
                   ]
        }
    }
#    mutate {
#        rename => {
#            "[uri_proto]" => "[url][scheme]"
#            "[uri_user]" => "[url][username]"
#            "[uri_domain]" => "[url][domain]"
#            "[uri_path]" => "[url][path]"
#            "[uri_query]" => "[url][query]"
#        }
#    }
    # url.domain #########################################
    tld {
        source => "[url][domain]"
        target => "[@metadata][domain_url]"
    }
    if [@metadata][domain_url][trd]{
        mutate {
            join =>  { "[@metadata][domain_url][trd]" => "." }
         }
    }
    mutate {
        rename =>    { "[@metadata][domain_url][domain]" => "[url][registered_domain]"  }
        #rename =>    { "[@metadata][domain_url][trd]" => "[url][subdomain]"  }
        rename =>    { "[@metadata][domain_url][tld]" => "[url][top_level_domain]" }
    }


    
    #### tls.client.server_name recomendation https://www.elastic.co/guide/en/ecs/current/ecs-tls.html
    mutate {
        copy =>{ "[tls][client][server_name]"=> "[destination][domain]" }
    }

    ### user_agent #########################################################
    ## https://github.com/logstash-plugins/logstash-filter-useragent/issues/56

    useragent {
      source => "[user_agent][original]"
      target => "[@metadata][ua_tmp]"
    
      add_field => {
        "[user_agent][device][name]" => "%{[@metadata][ua_tmp][device]}"
        "[user_agent][os][name]" => "%{[@metadata][ua_tmp][os_name]}"
        "[user_agent][name]" => "%{[@metadata][ua_tmp][name]}"
      }
    }
    
    # OS version ECS compatibility
    if [@metadata][ua_tmp][os_major] {
      mutate {
        add_field => {
          "[user_agent][os][version]" => "%{[@metadata][ua_tmp][os_major]}"
        }
      }
    
      if [@metadata][ua_tmp][os_minor] {
        mutate {
          replace => {
            "[user_agent][os][version]" => "%{[user_agent][os][version]}.%{[@metadata][ua_tmp][os_minor]}"
          }
        }
    
        if [@metadata][ua_tmp][os_patch] {
          mutate {
            replace => {
              "[user_agent][os][version]" => "%{[user_agent][os][version]}.%{[@metadata][ua_tmp][os_patch]}"
            }
          }
    
          if [@metadata][ua_tmp][os_build] {
            mutate {
              replace => {
                "[user_agent][os][version]" => "%{[user_agent][os][version]}.%{[@metadata][ua_tmp][os_build]}"
              }
            }
          }
        }
      }
    
      mutate {
        add_field => {
          "[user_agent][os][full]" => "%{[user_agent][os][name]} %{[user_agent][os][version]}"
        }
      }
    }
    
    # User agent version ECS compatibility
    if [@metadata][ua_tmp][major] {
      mutate {
        add_field => {
          "[user_agent][version]" => "%{[@metadata][ua_tmp][major]}"
        }
      }
    
      if [@metadata][ua_tmp][minor] {
        mutate {
          replace => {
            "[user_agent][version]" => "%{[user_agent][version]}.%{[@metadata][ua_tmp][minor]}"
          }
        }
    
        if [@metadata][ua_tmp][patch] {
          mutate {
            replace => {
              "[user_agent][version]" => "%{[user_agent][version]}.%{[@metadata][ua_tmp][patch]}"
            }
          }
    
          if [@metadata][ua_tmp][build] {
            mutate {
              replace => {
                "[user_agent][version]" => "%{[user_agent][version]}.%{[@metadata][ua_tmp][build]}"
              }
            }
          }
        }
      }
    }

    # iana_number to network.transport #################################
    # https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml
    if [network][iana_number] and ![network][transport] {
        translate {
            source => "[network][iana_number]"
            target => "[network][transport]"
            dictionary => {
                "0"=>"HOPOPT"
                "1"=>"ICMP"
                "2"=>"IGMP"
                "3"=>"GGP"
                "4"=>"IPv4"
                "5"=>"ST"
                "6"=>"TCP"
                "7"=>"CBT"
                "8"=>"EGP"
                "9"=>"IGP"
                "10"=>"BBN-RCC-MON"
                "11"=>"NVP-II"
                "12"=>"PUP"
                "13"=>"ARGUS (deprecated)"
                "14"=>"EMCON"
                "15"=>"XNET"
                "16"=>"CHAOS"
                "17"=>"UDP"
                "18"=>"MUX"
                "19"=>"DCN-MEAS"
                "20"=>"HMP"
                "21"=>"PRM"
                "22"=>"XNS-IDP"
                "23"=>"TRUNK-1"
                "24"=>"TRUNK-2"
                "25"=>"LEAF-1"
                "26"=>"LEAF-2"
                "27"=>"RDP"
                "28"=>"IRTP"
                "29"=>"ISO-TP4"
                "30"=>"NETBLT"
                "31"=>"MFE-NSP"
                "32"=>"MERIT-INP"
                "33"=>"DCCP"
                "34"=>"3PC"
                "35"=>"IDPR"
                "36"=>"XTP"
                "37"=>"DDP"
                "38"=>"IDPR-CMTP"
                "39"=>"TP++"
                "40"=>"IL"
                "41"=>"IPv6"
                "42"=>"SDRP"
                "43"=>"IPv6-Route"
                "44"=>"IPv6-Frag"
                "45"=>"IDRP"
                "46"=>"RSVP"
                "47"=>"GRE"
                "48"=>"DSR"
                "49"=>"BNA"
                "50"=>"ESP"
                "51"=>"AH"
                "52"=>"I-NLSP"
                "53"=>"SWIPE (deprecated)"
                "54"=>"NARP"
                "55"=>"MOBILE"
                "56"=>"TLSP"
                "57"=>"SKIP"
                "58"=>"IPv6-ICMP"
                "59"=>"IPv6-NoNxt"
                "60"=>"IPv6-Opts"
                "62"=>"CFTP"
                "64"=>"SAT-EXPAK"
                "65"=>"KRYPTOLAN"
                "66"=>"RVD"
                "67"=>"IPPC"
                "69"=>"SAT-MON"
                "70"=>"VISA"
                "71"=>"IPCV"
                "72"=>"CPNX"
                "73"=>"CPHB"
                "74"=>"WSN"
                "75"=>"PVP"
                "76"=>"BR-SAT-MON"
                "77"=>"SUN-ND"
                "78"=>"WB-MON"
                "79"=>"WB-EXPAK"
                "80"=>"ISO-IP"
                "81"=>"VMTP"
                "82"=>"SECURE-VMTP"
                "83"=>"VINES"
                "84"=>"TTP"
                "85"=>"NSFNET-IGP"
                "86"=>"DGP"
                "87"=>"TCF"
                "88"=>"EIGRP"
                "89"=>"OSPFIGP"
                "90"=>"Sprite-RPC"
                "91"=>"LARP"
                "92"=>"MTP"
                "93"=>"AX.25"
                "94"=>"IPIP"
                "95"=>"MICP (deprecated)"
                "96"=>"SCC-SP"
                "97"=>"ETHERIP"
                "98"=>"ENCAP"
                "100"=>"GMTP"
                "101"=>"IFMP"
                "102"=>"PNNI"
                "103"=>"PIM"
                "104"=>"ARIS"
                "105"=>"SCPS"
                "106"=>"QNX"
                "107"=>"A/N"
                "108"=>"IPComp"
                "109"=>"SNP"
                "110"=>"Compaq-Peer"
                "111"=>"IPX-in-IP"
                "112"=>"VRRP"
                "113"=>"PGM"
                "115"=>"L2TP"
                "116"=>"DDX"
                "117"=>"IATP"
                "118"=>"STP"
                "119"=>"SRP"
                "120"=>"UTI"
                "121"=>"SMP"
                "122"=>"SM (deprecated)"
                "123"=>"PTP"
                "124"=>"ISIS over IPv4"
                "125"=>"FIRE"
                "126"=>"CRTP"
                "127"=>"CRUDP"
                "128"=>"SSCOPMCE"
                "129"=>"IPLT"
                "130"=>"SPS"
                "131"=>"PIPE"
                "132"=>"SCTP"
                "133"=>"FC"
                "134"=>"RSVP-E2E-IGNORE"
                "135"=>"Mobility Header"
                "136"=>"UDPLite"
                "137"=>"MPLS-in-IP"
                "138"=>"manet"
                "139"=>"HIP"
                "140"=>"Shim6"
                "141"=>"WESP"
                "142"=>"ROHC"
                "143"=>"Ethernet"
                "255"=>"Reserved"
            }
            #fallback => "I'm a teapot"
        }
    }

}
output {

    pipeline {
            send_to => "output"
        }
}
