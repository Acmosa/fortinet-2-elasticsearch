input {
    pipeline {
        address => "fortigate_2_ecs"
    }

}

filter {

#remove event.original for saving disk space
    #mutate{ remove_field => ["[event][original]"]  }

#validea "N/A" on ip fields
    if [assigned]=="N/A" { mutate { remove_field => ["assigned"] } }
    if [assignip]=="N/A"  { mutate { remove_field => ["assignip"] } }
    if [botnetip]=="N/A" { mutate { remove_field => ["botnetip"] } }
    if [ddnsserver]=="N/A" { mutate { remove_field => ["ddnsserver"] } }
    if [domainctrlip]=="N/A" { mutate { remove_field => ["domainctrlip"] } }
    if [dstip]=="N/A" { mutate { remove_field => ["dstip"] } }
    if [gateway]=="N/A" { mutate { remove_field => ["gateway"] } }
    if [ip]=="N/A" { mutate { remove_field => ["ip"] } }
    if [local]=="N/A" { mutate { remove_field => ["local"] } }
    if [locip]=="N/A" { mutate { remove_field => ["locip"] } }
    if [nat]=="N/A" { mutate { remove_field => ["nat"] } }
    if [remip]=="N/A" { mutate { remove_field => ["remip"] } }
    if [remote]=="N/A"{ mutate { remove_field => ["remote"] } }
    if [srcip]=="N/A" { mutate { remove_field => ["srcip"] } }
    if [tranip]=="N/A" { mutate { remove_field => ["tranip"] } }
    if [transip]=="N/A" { mutate { remove_field => ["transip"] } }
    if [tunnelip]=="N/A" { mutate { remove_field => ["tunnelip"] } }
    if [trueclntip]=="N/A" { mutate { remove_field => ["trueclntip"] } }


#rename fortios fields that overlap with ECS.    
    mutate {
        rename => { "[agent]" => "[fortios][agent]" }
        rename => { "[error]" => "[fortios][error]" }
        rename => { "[file]" => "[fortios][file]" }
        rename => { "[group]" => "[fortios][group]" }
        rename => { "[hash]" => "[fortios][hash]" }
        rename => { "[host]" => "[fortios][host]" }
        rename => { "[interface]" => "[fortios][interface]" }
        rename => { "[log]" => "[fortios][log]" }
        rename => { "[process]" => "[fortios][process]" }
        rename => { "[server]" => "[fortios][server]" }
        rename => { "[service]" => "[fortios][service]" }
        rename => { "[threat]" => "[fortios][threat]" }
        rename => { "[url]" => "[fortios][url]" }
        rename => { "[user]" => "[fortios][user]" }

        #session_id not numeric on event-wad logs
        rename => { "[session_id]" => "[fortios][session_id]" }

    }

#ecs translation
    mutate {
        add_field => { "[ecs][version]" => "1.6.0" }
        rename => {
            "syslog5424_pri" => "[log][syslog][priority]"
            "[devid]" => "[observer][serial_number]"
            "[devname]" => "[observer][name]"
            "[level]"=> "[log][level]"
            "[logid]" => "[event][code]"
            "[tz]"=> "[event][timezone]"
        }

    }

    if [type] == "traffic" {
        mutate {
            rename => {
                "[action]"=> "[event][action]"
                "[app]"=> "[network][application]"
                "[collectedemail]"=> "[source][user][email]"
                "[dstcollectedemail]"=> "[destination][user][email]"
                "[dstintf]"=> "[observer][egress][interface][name]"
                "[dstintfrole]"=> "[observer][egress][interface][role]"
                "[dstip]"=> "[destination][ip]"
                "[dstmac]"=> "[destination][mac]"
                "[dstname]"=> "[destination][address]"
                "[dstport]"=> "[destination][port]"
                "[duration]"=> "[event][duration]"
                "[fortios][group]"=> "[source][user][group][name]"
                "[msg]"=> "[message]"
                "[policyid]"=> "[rule][id]"
                "[policyname]"=> "[rule][name]"
                "[poluuid]"=> "[rule][uuid]"
                "[proto]"=> "[network][iana_number]"
                "[rcvdbyte]"=> "[destination][bytes]"
                "[rcvdpkt]"=> "[destination][packets]"
                "[sentbyte]"=> "[source][bytes]"
                "[sentpkt]"=> "[source][packets]"
                "[fortios][service]"=> "[network][protocol]"
                "[srcdomain]"=> "[source][domain]"
                "[srcintf]"=> "[observer][ingress][interface][name]"
                "[srcintfrole]"=> "[observer][ingress][interface][role]"
                "[srcip]"=> "[source][ip]"
                "[srcmac]"=> "[source][mac]"
                "[srcport]"=> "[source][port]"
                "[tranip]"=> "[destination][nat][ip]"
                "[tranport]"=> "[destination][nat][port]"
                "[transip]"=> "[source][nat][ip]"
                "[transport]"=> "[source][nat][port]"
                "[fortios][user]"=> "[source][user][name]"
                "[fortios][url]"=> "[url][full]"
                "[vrf]"=> "[network][vrf]"
                "[crscore]"=> "[event][risk_score]"
            }
            copy => {
                "[type]" => "[rule][ruleset]"
                "[subtype]" => "[rule][category]"
            }

        }

        # host for SIEM UI ######################################################################
        # only for src* fields is taken into account
        # https://kb.fortinet.com/kb/viewContent.do?externalId=FD40598&sliceId=1
        #  The data of "dstname" is obtained by a reverse DNS query for the IP address of "dstip"
       
        mutate {
            rename => {
                "[srcname]" => "[host][name]"
                "[mastersrcmac]" => "[host][mac]"
                "[osname]" => "[host][os][name]"
                "[srcswversion]" => "[host][os][version]"
                "[srcfamily]" => "[host][os][family]"
                "[devtype]" => "[host][type]"
                "[srchwvendor]" => "[host][vendor]"
            }

            copy => {
                "[source][user][name]" => "[host][user][name]"
                "[source][user][group][name]" => "[host][user][group][name]"
                "[source][ip]" => "[host][ip]"
            }
        }
        

    # ECS categorization fields
        mutate {
            add_field => { "[event][kind]" => "event" }
            #add_field => { "[event][category]" => "network" } this should be the correct value once SIEM UI gets aligned with ECS event.category allowed values
            add_field => { "[event][category]" => "network_traffic" }
            add_field => { "[event][type]" => "connection" }
        }
        if [action] == "deny" or [utmaction] == "block" {
            mutate { add_field => { "[event][type]" => "denied" } }
        }
        else {
            mutate { add_field => { "[event][type]" => "allowed" } }
        }
        if [action] == "start" {
            mutate { add_field => { "[event][type]" => "start" } }
        }
        else {
            mutate { add_field => { "[event][type]" => "end" } }
        }
        if [action] in [ "dns" , "ip-conn" ] {
            mutate { add_field => { "[event][type]" => "error" } }
        }
        if [network][application] {
            mutate { add_field => { "[event][type]" => "protocol" } }
        }
        
        if [event][risk_score] { mutate { replace => { "[event][kind]" => "alert" } } }
    }


    # type=dns for version 6.0 and below. From 6.2, dns is subtype of utm

    else if [type]  in [ "utm" , "dns" ] {
        mutate {
            split => { "ipaddr" => ", " }
        }
        mutate {
            rename => {
                "[fortios][agent]"=> "[user_agent][original]"
                "[app]"=> "[network][application]"
                "[applist]"=> "[rule][name]"
                "[ccertissuer]"=> "[tls][client][issuer]"
                "[dir]"=> "[network][direction]"
                "[dst_int]"=> "[observer][egress][interface][name]"
                "[dst_port]"=> "[destination][port]"
                "[dstintfrole]"=> "[observer][egress][interface][role]"
                "[dstip]"=> "[destination][ip]"
                "[duration]"=> "[event][duration]"
                "[fortios][error]"=> "[error][message]"
                "[errorcode]"=> "[error][code]"
                "[event_id]"=> "[event][id]"
                "[eventtype]"=> "[event][action]"
                "[filehash]"=> "[file][hash][crc32]"
                "[filename]"=> "[file][name]"
                "[filesize]"=> "[file][size]"
                "[filetype]"=> "[file][extension]"
                "[fortios][group]"=> "[source][user][group][name]"
                "[hostname]"=> "[url][domain]"
                "[ipaddr]"=> "[dns][resolved_ip]"
                "[msg]"=> "[message]"
                "[policy_id]"=> "[rule][id]"
                "[profile]"=> "[rule][name]"
                "[proto]"=> "[network][iana_number]"
                "[qclass]"=> "[dns][question][class]"
                "[qname]"=> "[dns][question][name]"
                "[qtype]"=> "[dns][question][type]"
                "[rcvdbyte]"=> "[destination][bytes]"
                "[reason]"=> "[event][reason]"
                "[ref]"=> "[event][reference]"
                "[scertcname]"=> "[tls][client][server_name]"
                "[scertissuer]"=> "[tls][server][issuer]"
                "[sentbyte]"=> "[source][bytes]"
                "[fortios][service]"=> "[network][protocol]"
                "[src_int]"=> "[observer][ingress][interface][name]"
                "[src_port]"=> "[source][port]"
                "[srcdomain]"=> "[source][domain]"
                "[srcintfrole]"=> "[observer][ingress][interface][role]"
                "[srcip]"=> "[source][ip]"
                "[srcmac]"=> "[source][mac]"
                "[fortios][user]"=> "[source][user][name]"
                "[vrf]"=> "[network][vrf]"
                "[xid]"=> "[dns][id]"
                "[fortios][url]"=> "[url][path]"
                "[crscore]"=> "[event][risk_score]"
            }
            copy => {
                "[type]" => "[rule][ruleset]"
                "[subtype]" => "[rule][category]"
            }
        }
        
        mutate{
            rename => {
                "[direction]"=> "[network][direction]"
                "[dstintf]"=> "[observer][egress][interface][name]"
                "[eventid]"=> "[event][id]"
                "[hostname]"=> "[destination][domain]"
                "[locip]"=> "[source][ip]"
                "[locport]"=> "[source][port]"
                "[policyid]"=> "[rule][id]"
                "[srcintf]"=> "[observer][ingress][interface][name]"
                "[remip]"=> "[destination][ip]"
                "[remport]"=> "[destination][port]"
                "[voip_proto]"=> "[network][protocol]"
            }
        }

        mutate {
            rename =>{ 
                "[dstport]" => "[destination][port]"
                "[srcport]" => "[source][port]"
            }
        }

        if [subtype] =="virus" {
        	mutate { rename =>{ "[url][path]"=> "[url][full]" } }
        } 

        ### extended logging on webfilter
        # https://docs.fortinet.com/document/fortigate/6.2.4/fortios-log-message-reference/496081/enabling-extended-logging
        #config webfilter profile
        #    edit "test-webfilter"
        #        set extended-log enable
        #        set web-extended-all-action-log enable
        #    next
        #end

        kv { 
            source => "rawdata"
            field_split => "|"
        }
        
        mutate {
            rename =>{ 
                "[Method]" => "[http][request][method]"
                "[User-Agent]" => "[user_agent][original]"
                "[Referer]" => "[http][request][referrer]"
            }
        }

    # ECS categorization fields
        mutate {
            add_field => { "[event][kind]" => "event" }
            add_field => { "[event][type]" => "connection" }
        }
        if [subtype] == "virus" {
            mutate { add_field => { "[event][category]" => "malware" } }
        }
        else if [subtype] in [ "webfilter" , "waf" ] {
            mutate { add_field => { "[event][category]" => "web" } }
        }
        else if [subtype] == "ips" {
            mutate { add_field => { "[event][category]" => "intrusion_detection" } }
        }
        else if [subtype] == "ssl" {
            mutate { add_field => { "[event][category]" => "certifcate" } }
        }
        else if [subtype] in [ "dlp" , "filefilter" , "cifs" ] {
            mutate { add_field => { "[event][category]" => "file" } }
        }
        else if [subtype] == "emailfilter" {
            mutate { add_field => { "[event][category]" => "email" } }
        }

        if [action] in [ "pass" , "passthrough"  , "permit" ] {
            mutate { add_field => { "[event][type]" => "allowed" } }
        }
        else if [action] in [ "block" , "blocked" , "dropped" ] {
            mutate { add_field => { "[event][type]" => "denied" } }
        }
        #other actions: redirect analytics monitored dropped redirect detected content-disarmed

        if [event][risk_score] { mutate { replace => { "[event][kind]" => "alert" } } }
#        #just some categories will trigger alert
#
#        if [subtype] in [ "webfilter" , "dns" ] {
#            if [catdesc] not in ["Alcohol","Discrimination","Drug Abuse","Dynamic DNS","Explicit Violence","Extremist Groups","Freeware and Software Downloads","Gambling","Hacking","Illegal or Unethical","Malicious Websites","Marijuana","Newly Observed Domain","Newly Registered Domain","Nudity and Risque","Other Adult Materials","Peer-to-peer file sharing","Phishing","Plagiarism","Pornography","Proxy Avoidance","Remote Access","Spam URLs","Tobacco","Weapons (sales)"]{
#                mutate { replace => { "[event][kind]" => "event" } }
#            }
#        }
#
#        if [subtype] == "app-ctrl" {
#            if [appcat] not in ["Botnet","P2P","Proxy","Remote.Access"]{    
#                mutate { replace => { "[event][kind]" => "event" } }
#            }
#        }
#
#        if [subtype] == "voip" {
#            if [action] == "permit" {    
#                utate { replace => { "[event][kind]" => "event" } }
#            }
#        }

    }  

    else if [type] == "event" {
        mutate{

            copy =>{ "[fortios][agent]"=> "[user_agent][original]" }
            copy =>{ "[daddr]"=> "[destination][address]" }
            copy =>{ "[dir]"=> "[network][direction]" }
            copy =>{ "[direction]"=> "[network][direction]" }
            copy =>{ "[dstip]"=> "[destination][ip]" }
            copy =>{ "[dstport]"=> "[destination][port]" }
            copy =>{ "[duration]"=> "[event][duration]" }
            copy =>{ "[fortios][error]"=> "[error][message]" }
            copy =>{ "[error_num]"=> "[error][code]" }
             
            copy =>{ "[fortios][file]"=> "[file][name]" }
            copy =>{ "[filesize]"=> "[file][size]" }
            copy =>{ "[fortios][group]"=> "[user][group][name]" }
            copy =>{ "[hostname]"=> "[url][domain]" }
             
            copy =>{ "[msg]"=> "[message]" }
            copy =>{ "[policyid]"=> "[rule][id]" }
            copy =>{ "[proto]"=> "[network][iana_number]" }
            copy =>{ "[rcvdbyte]"=> "[destination][bytes]" }
            copy =>{ "[saddr]"=> "[source][address]" }
            copy =>{ "[sentbyte]"=> "[source][bytes]" }
            copy =>{ "[fortios][service]"=> "[network][protocol]" }
            copy =>{ "[sess_duration]"=> "[event][duration]" }
            copy =>{ "[source_mac]"=> "[source][mac]" }

            copy =>{ "[fortios][user]"=> "[user][name]" }
            copy =>{ "[fortios][url]"=> "[url][path]" }

            copy =>{ "[observer]"=> "[host]" }
        }

        mutate{
            copy =>{ "[dst_host]"=> "[destination][address]" }
            
            copy =>{ "[srcmac]"=> "[source][mac]" }
            copy =>{ "[srcport]"=> "[source][port]" }
        } 
        mutate{
            copy =>{ "[srcip]"=> "[source][ip]" }
        } 

        if [subtype] == "vpn" {
            mutate{
                copy =>{ "[remip]"=> "[source][ip]" }
            }
        }
    }


    #### event.start ############################################################################
    # https://docs.fortinet.com/document/fortigate/6.2.0/technical-tip-event-time-display-in-the-logs/21/fd47787
    # In 6.0.x ver and below versions event time view was in seconds.
    # In 6.2.x versions the display has been changed to Nano seconds.


    if [eventtime] {
        ruby  {
          code => '
            timevar = event.get("eventtime")
            event.set("eventtime", timevar[0...13])
           '
        }


        date {
            match => [ "eventtime", "UNIX", "UNIX_MS" ]
            timezone => "%{[event][timezone]}"
            target => "[event][start]"
            tag_on_failure => ["_dateparsefailure_eventtime"]
            remove_field => [ "eventtime" ]
        }
    }

#    source.address
#    if [source][user][name] {
#        mutate { add_field => { "[source][address]" => "%{[source][user][name]}" }    }    
#    }
#    else if [source][ip] {
#        mutate { add_field => { "[source][address]" => "%{[source][ip]}" }    }    
#    }
    
#   fortigate crash log. "msg" field is too big and creates ramdom fields
#   https://github.com/enotspe/fortinet-2-elasticsearch/issues/4
    if  [event][code] == "0100032546" {
        prune {
            whitelist_names => [ "^@timestamp$" , "observer", "organization", "event", "action", "ecs", "^subtype$" , "^type$" , "tags", "log" ]
        }
    }

#   "interim" logs for long live sessions, they are generated every 2 minutes and they are identified in the logs by logid=20
#   https://kb.fortinet.com/kb/documentLink.do?externalID=FD43912
    else if [event][code] == "0000000020" {
        drop { 
            #percentage => 50
        }
    }
    
}

output {
    
    pipeline {
        send_to => "common_ecs"
    }


}
